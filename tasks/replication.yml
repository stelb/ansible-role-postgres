---

- name: "replication | create .pgpass"
  lineinfile:
    path: "{{postgres_data_base}}/.pgpass"
    line: "*:{{pgc.value.port}}:replication:replication:{{postgres_passwords[pgc.key]['replication']|default('no pw set')}}"
    regexp: "^.:{{pgc.value.port}}:replication:replication:"
    create: yes
    owner: postgres
    group: postgres
    mode: 0600

- name: "replication | reload config on primary"
  postgresql_query:
    db: postgres
    port: "{{pgc.value.port}}"
    query: "SELECT pg_reload_conf();"
  become: true
  become_user: postgres
  when: inventory_hostname == postgres_primary

- name: replication | [apt] create cluster
  shell: "/usr/bin/pg_createcluster --locale en_US.UTF-8 -e UTF8 -p {{pgc.value.port}} {{pgc.value.version}} {{pgc.key}} -- -k"
  args:
    creates: "{{postgres_config_base}}/{{pgc.value.version}}/{{pgc.key}}/postgresql.conf"
  become: true
  become_user: postgres
  register: createcluster
  when: inventory_hostname != postgres_primary and ansible_distribution == 'Debian'

- name: replication | [apt] clean data
  file:
    path: "{{postgres_data_base}}/{{pgc.value.version}}/{{pgc.key}}/"
    state: absent
  when: inventory_hostname != postgres_primary and ansible_distribution == 'Debian' and createcluster.changed


- name: "replication | copy data from primary"
  shell: "pg_basebackup -h {{postgres_primary}} -D {{postgres_data_base}}/{{pgc.value.version}}/{{pgc.key}} -U replication -X stream -R"
  args:
    creates: "{{postgres_data_base}}/{{pgc.value.version}}/{{pgc.key}}"
  become: true
  become_user: postgres
  when: inventory_hostname != postgres_primary
