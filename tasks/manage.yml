---
- include_vars: system.yml

- name: "manage | [{{pgc.key}}] roles"
  postgresql_user:
    name: "{{item.key}}"
    port: "{{pgc.value.port}}"
    role_attr_flags: "NOLOGIN"
    state: "{{item.value.state | default('present')}}"
  become: true
  become_user: postgres
  when: inventory_hostname == postgres_primary
  with_dict:
    - "{{pgc.value.role}}"

- name: "manage | [{{pgc.key}}] users"
  postgresql_user:
    name: "{{item.key}}"
    password: "{{item.value.password | default(postgres_passwords[pgc.key][item.key] | default(None))}}"
    encrypted: true
    port: "{{pgc.value.port}}"
    role_attr_flags: "{{item.value.options | default(None)}}"
    state: "{{item.value.state | default('present')}}"
  become: true
  become_user: postgres
  when: inventory_hostname == postgres_primary
  with_dict:
    - "{{pgc.value.user | combine(postgres_sys_user)}}"

- name: "manage | [{{pgc.key}}] membership"
  postgresql_membership:
    group: "{{item.key}}"
    target_roles: "{{item.value.members}}"
    port: "{{pgc.value.port}}"
    state: "{{item.value.state | default('present')}}"
  become: true
  become_user: postgres
  when: inventory_hostname == postgres_primary
  with_dict:
    "{{pgc.value.membership | default(None)}}"

- name: "manage | [{{pgc.key}}] databases"
  postgresql_db:
    name: "{{item.name}}"
    owner: "{{item.owner | default(None)}}"
    state: "{{item.state | default('present')}}"
  become: true
  become_user: postgres
  when: inventory_hostname == postgres_primary
  with_items:
    - "{{pgc.value.database | union(postgres_sys_database)}}"

- name: "manage | [{{pgc.key}}] schemas"
  postgresql_schema:
    db: "{{item.db}}"
    name: "{{item.name}}"
    owner: "{{item.owner}}"
  become: True
  become_user: postgres
  when: inventory_hostname == postgres_primary
  with_items:
    - "{{pgc.value.schema}}"

- name: "manage | [{{pgc.key}}] extensions"
  postgresql_ext:
    db: "{{item.0.name}}"
    name: "{{item.1}}"
    cascade: true
  become: true
  become_user: postgres
  when: inventory_hostname == postgres_primary
  loop: "{{pgc.value.database | union(postgres_sys_database) | subelements('extension', skip_missing=True) | default(None)}}"

- name: "manage | [{{pgc.key}}] privs"
  postgresql_privs:
    database: "{{item.database}}"
    schema: "{{item.schema}}"
    roles: "{{item.roles}}"
    target_roles: "{{item.target_roles | default(None)}}"
    type: "{{item.type}}"
    objs: "{{item.objs}}"
    privs: "{{item.privs}}"
  when: inventory_hostname == postgres_primary
  with_items:
    - "{{pgc.value.privs}}"


- name: "manage | check if pg_hba exists"
  stat:
    path: "{{postgres_config_base}}/{{pgc.value.version}}/{{pgc.key}}/pg_hba.conf"
  register: file_pg_hba

- name: "manage | [{{pgc.key}}] pg_hba"
  postgresql_pg_hba:
    dest: "{{postgres_config_base}}/{{pgc.value.version}}/{{pgc.key}}/pg_hba.conf"
    contype: "{{item.contype}}"
    users: "{{item.users}}"
    source: "{{item.source}}"
    databases: "{{item.databases}}"
    method: "{{item.method}}"
    create: true
    state: present
  with_items:
    - "{{pgc.value.hba | union(postgres_sys_hba)}}"
  when: file_pg_hba.stat.exists
  tags: hba

- name: "manage | reload config"
  postgresql_query:
    db: postgres
    port: "{{pgc.value.port}}"
    query: "SELECT pg_reload_conf();"
  become: true
  become_user: postgres
  when: file_pg_hba.stat.exists
